/*
 * Copyright (C) Aros Bio AB.
 *
 * CPSign is an Open Source Software that is dual licensed to allow you to choose a license that best suits your requirements:
 *
 * 1) GPLv3 (GNU General Public License Version 3) with Additional Terms, including an attribution clause as well as a limitation to use the software for commercial purposes.
 *
 * 2) CPSign Proprietary License that allows you to use CPSign for commercial activities, such as in a revenue-generating operation or environment, or integrate CPSign in your proprietary software without worrying about disclosing the source code of your proprietary software, which is required if you choose to use the software under GPLv3 license. See arosbio.com/cpsign/commercial-license for details.
 */
package com.arosbio.cpsign.app.params.mixins;

import java.io.File;
import java.net.URI;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.arosbio.cpsign.app.utils.ParameterUtils;
import com.arosbio.cpsign.app.utils.ParameterUtils.ArgumentType;
import com.arosbio.io.UriUtils;

import picocli.CommandLine.Option;

public class PrecomputedDatasetMixin {

	private static final Logger LOGGER = LoggerFactory.getLogger(PrecomputedDatasetMixin.class);
	
	@Option(names = { "-ds", "--data-set" },
			description = "Precomputed data set, generated by the "+ParameterUtils.RUN_EXPLAIN_ANSI_ON + "precompute" + ParameterUtils.ANSI_OFF + " command",
			paramLabel = ArgumentType.URI_OR_PATH,
			required = true)
	private URI modelFile;

	private File localFile;
	
	/**
	 * Reading a JAR file requirer that it is a local file, this method 
	 * converts the given URI into a local file (optionally downloads it)
	 * @return The input as local file, cached if non-local URI given
	 * @throws IllegalArgumentException If the given URI is invalid in some way
	 */
	public File getAsFile() throws IllegalArgumentException {
		if (localFile != null)
			return localFile;
		
		localFile = UriUtils.getIfLocalFile(modelFile);
		if (localFile != null){
			LOGGER.debug("precomputed data set was a local resource - no need to download anything");
			return localFile;
		}
		// remote thing - need to download it
		try {
			localFile = UriUtils.downloadToLocalFile(modelFile);
			LOGGER.debug("downloaded precomputed data set as file:{}",localFile);
		} catch (Exception e){
			LOGGER.debug("failed downloading precomputed data set to local file",e);
			throw new IllegalArgumentException("Invalid URI given to --data-set parameter: "+e.getMessage());
		}

		return localFile;
	}

}
